#!/usr/bin/env python3
"""
Groq API Setup Script for EDI X12 278 System
Helps configure and test the Groq API integration for AI features.
"""

import os
import sys
from pathlib import Path

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text):
    print(f"\n{Colors.BOLD}{Colors.BLUE}{text}{Colors.END}")

def print_success(text):
    print(f"{Colors.GREEN}✅ {text}{Colors.END}")

def print_warning(text):
    print(f"{Colors.YELLOW}⚠️  {text}{Colors.END}")

def print_error(text):
    print(f"{Colors.RED}❌ {text}{Colors.END}")

def check_groq_installation():
    """Check if Groq is installed."""
    print_header("Checking Groq Installation")
    
    try:
        import groq
        print_success("Groq library is installed")
        return True
    except ImportError:
        print_error("Groq library not found")
        print("Installing Groq library...")
        
        try:
            import subprocess
            subprocess.check_call([sys.executable, "-m", "pip", "install", "groq"])
            print_success("Groq library installed successfully")
            return True
        except subprocess.CalledProcessError:
            print_error("Failed to install Groq library")
            print("Please run manually: pip install groq")
            return False

def create_or_update_env_file():
    """Create or update .env file with proper configuration."""
    print_header("Setting up Environment Configuration")
    
    env_file = Path(".env")
    
    # Default configuration
    config = {
        "DEBUG": "true",
        "API_HOST": "0.0.0.0",
        "API_PORT": "8000",
        "STREAMLIT_HOST": "0.0.0.0", 
        "STREAMLIT_PORT": "8501",
        "MAX_FILE_SIZE": "52428800",
        "UPLOAD_DIR": "./uploads",
        "OUTPUT_DIR": "./outputs",
        "TEMP_DIR": "./temp",
        "DATABASE_URL": "sqlite:///./edi_processor.db",
        "REDIS_URL": "redis://localhost:6379/0",
        "GROQ_API_KEY": "your_groq_api_key_here",
        "AI_MODEL": "llama-3.1-8b-instant",
        "FHIR_BASE_URL": "http://localhost:8080/fhir",
        "FHIR_VERSION": "R4",
        "LOG_LEVEL": "INFO",
        "LOG_FORMAT": "console",
        "SECRET_KEY": "your-secret-key-change-in-production",
        "ALLOWED_ORIGINS": '["*"]',
        "VALIDATE_SEGMENTS": "true",
        "STRICT_VALIDATION": "false"
    }
    
    # Check if .env exists and read existing values
    existing_config = {}
    if env_file.exists():
        print("Found existing .env file")
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        existing_config[key] = value
        except Exception as e:
            print_warning(f"Could not read existing .env file: {e}")
    
    # Merge configurations (keep existing values)
    final_config = {**config, **existing_config}
    
    # Get Groq API key from user if needed
    current_key = final_config.get("GROQ_API_KEY", "")
    if not current_key or current_key == "your_groq_api_key_here":
        print("\n" + "="*60)
        print("🔑 Groq API Key Configuration")
        print("="*60)
        print("You need a Groq API key to enable AI features.")
        print("1. Go to: https://console.groq.com/keys")
        print("2. Create a new API key")
        print("3. Copy the key (starts with 'gsk_')")
        print()
        
        while True:
            api_key = input("Enter your Groq API key (or 'skip' to continue without AI): ").strip()
            
            if api_key.lower() == 'skip':
                print_warning("Skipping Groq API key - AI features will be disabled")
                final_config["GROQ_API_KEY"] = "your_groq_api_key_here"
                break
            elif api_key.startswith('gsk_') and len(api_key) > 20:
                final_config["GROQ_API_KEY"] = api_key
                print_success("Groq API key configured successfully")
                break
            else:
                print_error("Invalid API key format. Must start with 'gsk_' and be longer than 20 characters.")
    else:
        if current_key.startswith('gsk_'):
            print_success("Existing Groq API key found")
        else:
            print_warning("Groq API key appears to be a placeholder")
    
    # Write the configuration
    try:
        with open(env_file, 'w') as f:
            f.write("# EDI X12 278 Processing System Configuration\n")
            f.write("# Generated by setup script\n\n")
            
            for key, value in final_config.items():
                f.write(f"{key}={value}\n")
        
        print_success(f"Configuration saved to {env_file}")
        return True
        
    except Exception as e:
        print_error(f"Failed to write .env file: {e}")
        return False

def test_groq_connection():
    """Test the Groq API connection."""
    print_header("Testing Groq API Connection")
    
    # Load environment variables
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print_warning("python-dotenv not found, using os.environ")
    
    api_key = os.getenv("GROQ_API_KEY")
    
    if not api_key or api_key == "your_groq_api_key_here":
        print_warning("No valid API key found - skipping connection test")
        return False
    
    try:
        from groq import Groq
        
        client = Groq(api_key=api_key)
        
        print("Making test API call...")
        response = client.chat.completions.create(
            model="llama-3.1-8b-instant",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": "Respond with exactly: 'EDI system AI test successful'"}
            ],
            max_tokens=20,
            temperature=0.1
        )
        
        message = response.choices[0].message.content.strip()
        print_success(f"API test successful: {message}")
        return True
        
    except Exception as e:
        error_str = str(e).lower()
        if "401" in error_str or "invalid" in error_str:
            print_error("Invalid API key - please check your Groq API key")
        elif "429" in error_str or "rate limit" in error_str:
            print_warning("Rate limit exceeded - wait a moment and try again")
        elif "quota" in error_str:
            print_warning("API quota exceeded - consider upgrading your Groq plan")
        else:
            print_error(f"API connection failed: {e}")
        return False

def create_directories():
    """Create required directories."""
    print_header("Creating Required Directories")
    
    directories = ["uploads", "outputs", "temp"]
    
    for dir_name in directories:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
            print_success(f"Created directory: {dir_name}")
        else:
            print(f"Directory already exists: {dir_name}")

def run_system_test():
    """Run a quick system test."""
    print_header("Running System Test")
    
    try:
        # Test imports
        from app.ai.analyzer import EDIAIAnalyzer
        from app.services.processor import EDIProcessingService
        
        print("Testing AI Analyzer...")
        analyzer = EDIAIAnalyzer()
        
        if analyzer.is_available:
            print_success("AI Analyzer initialized successfully")
            print(f"Model: {analyzer.model}")
        else:
            print_warning("AI Analyzer not available (API key may be missing)")
        
        print("Testing Processing Service...")
        service = EDIProcessingService()
        print_success("Processing Service initialized successfully")
        
        stats = service.get_statistics()
        print(f"AI Enabled: {stats.get('ai_enabled', False)}")
        
        return True
        
    except Exception as e:
        print_error(f"System test failed: {e}")
        return False

def show_next_steps():
    """Show next steps for the user."""
    print_header("Next Steps")
    
    print("1. Start the API server:")
    print("   python run_api.py")
    print()
    print("2. Start the Streamlit interface:")
    print("   python run_streamlit.py")
    print()
    print("3. Open your browser to:")
    print("   http://localhost:8501")
    print()
    print("4. Test AI features:")
    print("   - Upload an EDI file")
    print("   - Enable AI analysis")
    print("   - Check the results")
    print()
    print("5. For presentation:")
    print("   - Use the sample EDI file: sample_278.edi")
    print("   - Show the dashboard and statistics")
    print("   - Demonstrate AI analysis features")

def main():
    """Main setup function."""
    print(f"{Colors.BOLD}{Colors.BLUE}🚀 EDI X12 278 System - Groq AI Setup{Colors.END}")
    print("="*60)
    
    success_count = 0
    total_steps = 5
    
    # Step 1: Check Groq installation
    if check_groq_installation():
        success_count += 1
    
    # Step 2: Create/update .env file
    if create_or_update_env_file():
        success_count += 1
    
    # Step 3: Create directories
    create_directories()
    success_count += 1
    
    # Step 4: Test Groq connection
    if test_groq_connection():
        success_count += 1
    
    # Step 5: Run system test
    if run_system_test():
        success_count += 1
    
    # Summary
    print_header("Setup Summary")
    print(f"Completed {success_count}/{total_steps} setup steps")
    
    if success_count == total_steps:
        print_success("🎉 Setup completed successfully!")
        print_success("🤖 AI features are ready for your presentation!")
    elif success_count >= 3:
        print_warning("⚠️  Setup mostly complete with some warnings")
        print("System should work, but AI features may be limited")
    else:
        print_error("❌ Setup incomplete - please address the errors above")
    
    show_next_steps()

if __name__ == "__main__":
    main() 